//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Dom_Class_Contado.java
//  @ Date : 06/05/2010
//  @ Author : 
//
//



package Logica_Negocio.Dominio.FormaPago;



import Logica_Negocio.LogN_Inter_FormaPag;
import Logica_Negocio.MiExepcion.InputException;
import Utilidades.Util_Class_Utilitario;


/**
 * Retorna el cambio que se le da al cliente si la cantidad es superior al monto restante de la factura (este moto var�a seg�n el valor pasado por par�metro)
**/
public class Dom_Class_Contado  implements LogN_Inter_FormaPag {

	/**
	 * Valor pagado de la deuda en pesos 
	 */
    private float mValorPagado;
    /**
     * Valor a pagar para hacer el cólculo del cambio
     */
    private float mValorAPagar;

    
    public static final String TIPO = "Contado"; 
    


    /**
     * Se inicializa el objeto con el valor a pagar 
     * @param mValAPagar Valor a pagar contado
     * 
     */
    public Dom_Class_Contado(float mValAPagar){
        this.mValorAPagar = mValAPagar;

    }

    /**
     * Retorna el Mono Pago
     * @return mValorPagado
     */
    @Override
    public float getMonto() {
        return mValorPagado;
    }

    /**
     * <B> Modifica el valor pagado (mValorPagado)</B>
     * @param xMonto Monta a pago
     * @return El resto a pagar. (la resta del mValorAPagar -  mValorPagado) El resto a pagar. (la resta del mValorAPagar -  mValorPagado) 
     * @throws InputException Comprueba que el monto ingresado (xMonto) no sea un vaor negativo -- El monto no puede ser un valor negativo --
     */
    @Override
    public float setMonto(float xMonto)throws InputException {
        if (xMonto < 0)throw new InputException("El monto no puede ser un valor negativo");
        if (xMonto > mValorAPagar)mValorPagado = mValorAPagar;
        else mValorPagado = xMonto;
        
        float Resto = xMonto - mValorAPagar;
        if (Resto > 0) return Util_Class_Utilitario.Redondear_Sifras(2, Resto);
        return 0;
    }


    @Override
    public String getTipo() {
        return this.TIPO;
    }

    @Override
    public void validar() throws InputException {
        
    }

    @Override
    public float getMontoAPagar() {
        return mValorAPagar;
    }

    @Override
    public void setMonoAPatar(float xMonto) throws InputException {
        if (xMonto < 0)throw new InputException("El monto no puede ser un valor negativo");
        if (xMonto < mValorPagado) throw new InputException("El valor a pagar es inferior al valor pagado");
        mValorAPagar = xMonto;
        float Resp = 0;

    }


   

}
