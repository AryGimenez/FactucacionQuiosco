//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Dom_Class_FacVen.java
//  @ Date : 06/05/2010
//  @ Author : 
//
//



package Logica_Negocio.Dominio.Facturacion;


import Logica_Negocio.Dominio.Dom_Class_IVA;
import Logica_Negocio.Dominio.Dom_Class_Moneda;
import Logica_Negocio.Dominio.Dom_Class_ProductoComp;
import Logica_Negocio.Dominio.Dom_Class_SubProducto;
import Logica_Negocio.Dominio.Personas.Dom_Class_Cliente;
import Logica_Negocio.LogN_ClassAb_Factura;
import Logica_Negocio.LogN_ClassAb_LineaFac;
import Logica_Negocio.LogN_ClassAb_Persona;
import Logica_Negocio.LogN_ClassAb_Producto;
import Logica_Negocio.LogN_Inter_FormaPag;
import Logica_Negocio.MiExepcion.InputException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * Factura de Venta  
**/
public class Dom_Class_FacVen extends LogN_ClassAb_Factura  {

    //Construcores______________________________________________________________
    private HashMap<Integer, Float> mMapStokP = new HashMap<Integer, Float>();
    /**
     * Retorna la persona involucrada en la factura
    **/
    @Override
    public LogN_ClassAb_Persona getPersona() {
        return super.mObjPer;
    }

    public Dom_Class_FacVen() {
    }

    public Dom_Class_FacVen(int mNum, char mSerie){
        super(mNum, mSerie);
    }

    
    public Dom_Class_FacVen(ArrayList<LogN_ClassAb_LineaFac> mColLinF, Date mFech, int mNum, char mSerFac, LogN_ClassAb_Persona mObjPer, Dom_Class_Moneda xObjMon) throws InputException {
        super(mColLinF, mFech, mNum, mSerFac, mObjPer, xObjMon);
    }

    public Dom_Class_FacVen(ArrayList<LogN_ClassAb_LineaFac> mColLinF, Date mFech, int mNum, char mSerFac, ArrayList<LogN_Inter_FormaPag> mColForPag, LogN_ClassAb_Persona mObjPer, Dom_Class_Moneda xObjMon) throws InputException {
        super(mColLinF, mFech, mNum, mSerFac, mColForPag, mObjPer, xObjMon);
    }


    

    //Metodos___________________________________________________________________

    /**
     * Remplaza la persona involucrada en la factura siguiendo las restricciones de la clase  que lo implementa
     *
     * @param    mObjPer
    **/
    @Override
    public void setPersona(LogN_ClassAb_Persona mObjPer) throws InputException{
        
        if (mObjPer != null && !(mObjPer instanceof Dom_Class_Cliente)) throw new InputException("La persona de esta factura no es de tipo cliente ");
        super.mObjPer = mObjPer;

    }


    @Override
    public void actualizarStock() throws InputException {
        for (LogN_ClassAb_LineaFac ObjLF : super.getmColLinF()){
            ObjLF.actualizarStok(); //Comprobar funcionamiento.
        }
    }

    @Override
    public LogN_ClassAb_Factura duplicar() {
        Dom_Class_FacVen ObjFacVer = null;
        try {
            ObjFacVer = new Dom_Class_FacVen(getmColLinF(), getFech(), getNum(),getmSerFac(), getmColForPag(), mObjPer, mObjValMon.getObjMon());
        } catch (InputException ex) {
            Logger.getLogger(Dom_Class_FacVen.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ObjFacVer;

    }

    @Override
    public LogN_ClassAb_LineaFac CrearLinFac(float mCan, float mDes, float mPrePro, LogN_ClassAb_Producto mObjProducto) throws InputException {
        return new Dom_Class_LineaFacVen(mCan, mDes, mPrePro, mObjProducto);
    }

    @Override
    public void altaLineaFact(LogN_ClassAb_LineaFac xObjLF) throws InputException {
        xObjLF.validar();
        
        LogN_ClassAb_Producto ObjProd = this.getProductoCom(xObjLF.getmObjArt());
        Integer Key = ObjProd.getmProd_Cod();
        Float CanP = xObjLF.getmCan();
        
        if (mMapStokP == null) mMapStokP = new HashMap<Integer, Float>(); // Inicialisa el map en caso de que sea un valor nulo
        
        if(mMapStokP.containsKey(Key)){
            if (ObjProd.getMProd_Stock() <= CanP + mMapStokP.get(Key)) throw new InputException("La lÃ­nea de factura supera el stock del producto");
            
            Float StokLinF =  mMapStokP.get(Key);
            StokLinF = StokLinF + CanP;
        }else{
            mMapStokP.put(Key, CanP);   
        }
        
        super.altaLineaFact(xObjLF);
    }
    
    private Dom_Class_ProductoComp getProductoCom (LogN_ClassAb_Producto xObjProd){
        
        if (xObjProd instanceof Dom_Class_SubProducto) return ((Dom_Class_SubProducto)xObjProd).getmObjProd();
        
        return (Dom_Class_ProductoComp) xObjProd;
        
    }

    @Override
    public void update(Observable o, Object arg) {
        Dom_Class_LineaFacVen ObjLf = (Dom_Class_LineaFacVen) o;
        Dom_Class_ProductoComp ObjProdCom = this.getProductoCom(ObjLf.getmObjArt());
        Integer Key = ObjProdCom.getmProd_Cod();
        Float CanP = mMapStokP.get(Key);
        Float CanP2 = new  Float(0);
        
        for (LogN_ClassAb_LineaFac  ObjL : super.getmColLinF()){
            LogN_ClassAb_Producto ObjProd =  this.getProductoCom(ObjL.getmObjArt());
            if (ObjProdCom.equals(ObjProd)) 
                CanP2 = CanP2 + ObjL.getmCan();
        } // Fin for
        
        if (CanP2 > ObjLf.getmObjArt().getMProd_Stock()){
            ObjLf.deleteObserver(this);
            try {
                ObjLf.setCan(ObjLf.getmCan() + (CanP - CanP2));
            } catch (InputException ex) {  }
            ObjLf.addObserver(this);
        } else {
            mMapStokP.put(Key, CanP2);
        }
        
        super.update(o, arg);
    }

    @Override
    public String getTipoDoc() {
       return "Factura Venta";
    }


    
}
