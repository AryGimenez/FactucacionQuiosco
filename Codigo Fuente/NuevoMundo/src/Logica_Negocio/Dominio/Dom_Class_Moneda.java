//

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Dom_Class_Moneda.java
//  @ Date : 06/05/2010
//  @ Author : 
//
//


package Logica_Negocio.Dominio;

import Logica_Negocio.LogN_Inter_Duplicado;
import Logica_Negocio.LogN_Inter_Validar;
import Logica_Negocio.MiExepcion.InputException;
import Utilidades.Util_Class_Utilitario;

/**
 * <B><FONT COLOR="red">Representa las monedas del que se usan para la contabilidad</FONT></B> <BR>
 * @author ary
 */
public class Dom_Class_Moneda implements LogN_Inter_Validar, LogN_Inter_Duplicado<Dom_Class_Moneda> {

    // Atrigutos________________________________________________________________
    

    

    /**
     * Nombre de la moneda
     */
    private String mNom;

    /**
     * Símbolo de la moneda  ($US, etc)
     */
    private String mSim;

    /**
     * Símbolo de la moneda  ($US, etc)
     */
    private Dom_Class_Pais mObjPais;

    /**
     * Cotización del día de la moneda
     */
    private Dom_Class_Cotisacion mObjCot;
    
    private int mNum = -1;
    
    //Constructor_______________________________________________________________
   
    
    
    
     /**
     * Inicializa la moneda con todos los datos involucrados
     * @param mNom Nombre a asignar
     * @param mSim Simbolo  a asingar (opr ejemplo “U$S”)
     * @param mObjPais País al cual pertenece la moneda
     * @param mObjCot Cotización actual de la moneda
     */
    public Dom_Class_Moneda(String mNom, String mSim, Dom_Class_Pais mObjPais, Dom_Class_Cotisacion mObjCot) {
        this.mNom = mNom;
        this.mSim = mSim;
        this.mObjPais = mObjPais;
        this.mObjCot = mObjCot;
    }
    
    /**
     * Inicializa la moneda con todos los datos involucrados espeto la cotización   
     * @param mNom Nombre a asignar
     * @param mSim Simbolo  a asingar (opr ejemplo “U$S”)
     * @param mObjPais País al cual pertenece la moneda 
     */
    
    public Dom_Class_Moneda(String mNom, String mSim, Dom_Class_Pais mObjPais) {
        this(mNom, mSim, mObjPais, null);
    }
    
    /**
     * <B>Inicializa el objeto moneda con los datos de la moneda pasada por parámetro</B>
     * @param xObjMoneda 
     */
    public Dom_Class_Moneda (Dom_Class_Moneda xObjMoneda){
        this(xObjMoneda.mNom, xObjMoneda.mSim, xObjMoneda.mObjPais, xObjMoneda.mObjCot);
    }

    //Metodos___________________________________________________________________

    

    /**
     * Comprueba que el String pasado por parámetro no se una cadena null,
     * una cadena solo can caracteres en blanco
     * @param s String a Comprobar
     * @return Retorna true si la cadena cumple las características
     * solicitadas, retorna false en caso contrario.
     */
    private boolean validarString (String s){
        if (s == null) return false;
        s = s.trim();
        if (s.equals("")) return false;
        return true;
    }

    /**
     * Retorna el Nombre de la persona
     * @return mNom Nombre de la moneda
     */
    public String getNom() {
        return mNom;
    }

    /**
     * Remplaza el nombre de la moneda por la pasada por parametro siempre y cuando este
     * valor no sea una cadena vacía o solo con caracteres en blanco.
     * @param mNom Nombre por el cual se remplaza
     * @return True si se pudo efectuar la operación satisfactoriamente, false en caso contrario.
     */
    public boolean setNom(String mNom) {
        if (!this.validarString(mNom)) return false;
        this.mNom = mNom.trim();
        return true;
    }

    /**
     * Retorna el símbolo de la moneda
     * @return mSim Símbolo de la moneda
     */
    public String getSim() {
        return mSim;
    }

    /**
     * Remplaza el Símbolo de la moneda por la pasada por parámetro siempre y
     * cuando este valor no sea una cadena vacía o sola con caracteres en blanco.
     * @param mSim
     * @return booleana según si se pudo efectuar la operación descripta
     */
    public boolean setSim(String mSim) {
        if (!this.validarString(mSim)) return false;
        this.mSim = mSim; return false;
    }

    /**
     * Retorna la cotización actual de desata moneda
     * @return Cotización actual
     */
    public Dom_Class_Cotisacion getObjCoti() {
        return mObjCot;
    }

    /**
     * Remplaza la cotización actual por la pasada por parámetro siempre y
     * cuando ese valor no sea null .
     * @param mObjCot Cotización por la cual se va a reemplazar
     * @return True si la operación se efectuó satisfactoriamente
     */
    public boolean setObjCot(Dom_Class_Cotisacion mObjCot) {
        if (mObjCot == null) return false;
        this.mObjCot = mObjCot; return true;
    }

    /**
     * Retorna el País al que pertenece la moneda
     * @return mObjPais País al pque pertenese
     */
    public Dom_Class_Pais getObjPais() {
        return mObjPais;
    }

    /**
     * Remplaza el país actual siempre y cuando el valor pasado por parámetro
     * no sea un valor null
     * @param mObjPais País por el cual se va a efectuar el remplazo
     * @return True si se pudo efectuar la operación exitosamente,
     * false en caso contrario
     */
    public boolean setObjPais(Dom_Class_Pais mObjPais) {
        if (mObjPais == null) return false;
        this.mObjPais = mObjPais; return true;
    }

    /**
     * Compara que el Objeto pasado por parámetro no sea null, que sea de la misma
     * clase y que el símbolo o el país sea el mismo
     * @param obj
     * @return boolean
     */
    @Override
    public boolean equals(Object obj) {

        if (this == obj) return true;

        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        
        final Dom_Class_Moneda other = (Dom_Class_Moneda) obj;
        if ((this.mSim == null) ? (other.mSim != null) : !this.mSim.equals(other.mSim)) {
            return false;
        }
        if (this.mObjPais != other.mObjPais && (this.mObjPais == null || !this.mObjPais.equals(other.mObjPais))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 79 * hash + (this.mSim != null ? this.mSim.hashCode() : 0);
        hash = 79 * hash + (this.mObjPais != null ? this.mObjPais.hashCode() : 0);
        return hash;
    }

    @Override
    public String toString() {
        return "Sim: " + mSim + " Nom: " +mNom;
    }

    @Override
    public void validar() throws InputException {
        if (!Util_Class_Utilitario.ValidarString(mSim)) 
            throw new InputException("No ha ingresado un signo para esta moneda");
        
        if(!Util_Class_Utilitario.ValidarString(mNom))
            throw new InputException("No ha ingresado un nombre para esta moneda");
        
        if(mObjPais == null)
            throw new InputException("No ha ingresado un país para esta moneda");
        
    }

    /**
     * <B>Remplaza el número de moneda (mNum) </B>   por el pasado por parámetro
     * @param NumMon 
     */
    public void setNum(int NumMon) {
        this.mNum = NumMon;
    }
    /**
     * Número que identifica la moneda en el sistema
     * @return  mNum
     */
    public int getNum (){
        return this.mNum;
    }

    /**
     * Retorna un nuevo objeto moneda con los mismos datos de esta moneda
     * @return ObjMon
     */
    @Override
    public Dom_Class_Moneda duplicar() {
        Dom_Class_Moneda ObjMon = new Dom_Class_Moneda (this);
        ObjMon.setNum(mNum);
        return ObjMon;
    }

    /**
     * Determina si la moneda pasada por parámetro es una duplica (que coincida todos los datos) de esta moneda 
     * @param xObjCop Moneda a comparar 
     * @return true o false si la moneda pasada por parámetro es una duplica o no  
     */
    @Override
    public boolean duplicado(Dom_Class_Moneda xObjCop) {
        if (this == xObjCop) return true;
                
        if (!mNom.equals(xObjCop.mNom)) return false;
        if (mNum != xObjCop.mNum) return false;
        if (!mObjCot.duplicado(xObjCop.mObjCot)) return false;
        if (!mObjPais.duplicado(mObjPais)) return false;
        if (!mSim.equals(xObjCop.mSim)) return false;
        
        return true; 
    }
    
    /**
     * Remplaza los datos de la moneda</B> por los de la moneda pasada por parámetro
     * @param xObjMoneda Mondea Moneda a utilizar en la operación  
     * @throws InputException Excepción lanzada por el método “validar()” de xObjMoneda
     */
    public void modificar (Dom_Class_Moneda xObjMoneda)throws InputException{
        xObjMoneda.validar();
        mNom = xObjMoneda.mNom;
        mSim = xObjMoneda.mSim;
        mObjCot = xObjMoneda.mObjCot.duplicar();
        mObjPais = xObjMoneda.mObjPais;
        mSim = xObjMoneda.mSim;
        
    }




}
