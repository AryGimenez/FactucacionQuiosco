//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Dom_Class_Saldo.java
//  @ Date : 06/05/2010
//  @ Author : 
//
//



package Logica_Negocio.Dominio;

import Logica_Negocio.LogN_Class_Fachada;
import Logica_Negocio.LogN_Class_ValorMoneda;
import Logica_Negocio.LogN_Inter_Duplicado;
import Logica_Negocio.LogN_Inter_Validar;
import Logica_Negocio.MiExepcion.InputException;
import java.util.Date;

/**
 * Determina el monto del saldo si es a favor o en contra y la moneda de este saldo
 * @author Ary Gimenez
 *
 */
public class Dom_Class_Saldo implements LogN_Inter_Validar, LogN_Inter_Duplicado<Dom_Class_Saldo> {

    // Atributos================================================================
    
    private int mNum = -1;
    /**
     * Fecha de modificaci�n del saldo
    **/
    private Date mFechMod = new Date();

    /**
     * Determina si el saldo es a favor o en contra determinados con true o fose respectivamente.
    **/
    private boolean mHacreedor;

    /**
     * Valor que contiene es monto del saldo y el tipo de moneda del mismo
     */
    private LogN_Class_ValorMoneda mValMon;
    
    /**
     * Limite de Saldo hacreedor
     */
    private float mLimAceedor = 0;
    
    /**
     * Limite de Saldo Deudor 
     */
    private float mLimDeudor = 0;
    
    //Operaciones ==============================================================

    public Dom_Class_Saldo (Dom_Class_Saldo xObjSaldo){
        this(xObjSaldo.mHacreedor, xObjSaldo.mValMon.getMonto(), 
                xObjSaldo.mValMon.getObjMon(), xObjSaldo.mLimAceedor, xObjSaldo.mLimDeudor);
    }    
    public Dom_Class_Saldo (boolean mHacreedor, float xMontI, Dom_Class_Moneda xObjMon, float mLimAcreedor, float mLimDeudor){
        this(mHacreedor, xMontI, xObjMon);
        this.mLimAceedor = mLimAcreedor;
        this.mLimDeudor = mLimDeudor;
    }
    
    /**
     * Constructor completo el cual posee todos los datos contenidos en esta clase
     * @param mHacreedor Determina si el saldo es a favor o en contra
     * @param xMontoI Monto inicial del saldo
     * @param xObjMon Moneda involucrado en este saldo
     */
    public Dom_Class_Saldo(boolean mHacreedor, float xMontoI, Dom_Class_Moneda xObjMon) {
        this.mHacreedor = mHacreedor;
        this.mValMon = new LogN_Class_ValorMoneda(xMontoI,xObjMon);

    }

    /**
     * Constructor en el cual se le asigna automáticamente la moneda local del sistema
     * @param mHacreedor Determina si el saldo es a favor o en contra
     * @param xMontoI Monto inicial del saldo
     */
    public Dom_Class_Saldo(boolean mHacreedor, float xMontoI) {
        this(mHacreedor, xMontoI, LogN_Class_Fachada.getInstancia().getMonedaLoc());
    }

    /**
     * Retorna la última fecha de modificación
     * @return mFechMod Fecha de modificación
     */
    public Date getFechMod() {
        return mFechMod;
    }

//////	public boolean setFechMod(Date mFechMod) {
//////            this.mFechMod = mFechMod;
//////            return true;
//////	}

    /**
     * Retorna true si el saldo es a favor o false si es en contra
     * @return mHacreedor a Fabor o en Contra
     */
    public boolean getAcreedor() {
        return mHacreedor;
    }

    /**
     * Modifica el estado del saldo (a favor o en contra con true o false respectivamente)
     * @param mHacreedor Valor por el cual se modifica
     */
    public void setAcreedor(boolean mHacreedor) {
        this.mHacreedor= mHacreedor;
    }

    public Dom_Class_Moneda getObjMon() {
        return mValMon.getObjMon();
    }

    public boolean setObjMon(Dom_Class_Moneda mObjMon) {
        return this.mValMon.setObjMon(mObjMon);
    }

    public float getMonto() {
        return this.mValMon.getMonto();
    }

    public boolean setMonto(float mMonto) {
        return this.mValMon.setMonto(mMonto);

    }

    /**
     * Calculo y retorno el monto seg�n el cambio de la moneda actual a la pasada por par�metro
     *
     * @param    xObjMon
    **/
    public float getVenta (Dom_Class_Moneda xObjMon) {
        return this.mValMon.getVenta(xObjMon);
    }

    public float getCompra (Dom_Class_Moneda xObjMon){
        return this.mValMon.getCompra(xObjMon);
    }

    public float sumarSaldo(float mVal) {

        if (mVal < 0) return mValMon.getMonto(); // Comprueba que le valor pasado por parámetro no sea negativo
        if (mHacreedor){ // El saldo es a fabor
            mValMon.setMonto(mVal + this.getMonto());
        }else{ // si el slado es en contra
            float mValTem = 0;
            if (mVal > mValMon.getMonto()){ //si el valor a sumar es mayor
                mValTem = mVal - this.mValMon.getMonto();
                mHacreedor = true;
            } else {
                mValTem = this.getMonto() - mVal ;
            }
            mValMon.setMonto(mValTem);
        }
        return mValMon.getMonto();
    }

    public float restarSaldo(float mVal) {

        if (mVal < 0) return mValMon.getMonto(); // Comprueba que le valor pasado por parámetro no sea negativo
        if (mHacreedor){ // El saldo es a fabor
             float mValTem = 0;
            if (mVal > mValMon.getMonto()){ //si el valor a sumar es mayor
                mValTem = mVal - this.mValMon.getMonto();
                mHacreedor = false;
            } else {
                mValTem =  this.getMonto() - mVal;
            }
            mValMon.setMonto(mValTem);
        }else{ // si el slado es en contra
            mValMon.setMonto(this.mValMon.getMonto() + mVal);
        }
        return this.getMonto();
    }

    public float getmLimAceedor() {
        return mLimAceedor;
    }

    public void setmLimAceedor(float mLimAceedor) {
        if (mLimAceedor < 0) return;
        this.mLimAceedor = mLimAceedor;
    }

    public float getmLimDeudor() {

        return mLimDeudor;
    }

    public void setmLimDeudor(float mLimDeudor) {
        if (mLimDeudor < 0) return;
        this.mLimDeudor = mLimDeudor;
    }

    @Override
    public void validar() throws InputException {
        
        mValMon.validar();
        
        //Comprueba que el saldo sea hacedor que no supere el limite establecido y que sea mayor a 0
        if ( mHacreedor && mLimAceedor > 0 && mValMon.getMonto() > mLimAceedor ) 
            throw new InputException("El Saldo Acreedor supera el límite establecido");
        else if ((!mHacreedor) && mLimDeudor > 0 && mValMon.getMonto() > mLimDeudor)
            throw new InputException("El Saldo Deudor supera el límite establecido");
        
        
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Dom_Class_Saldo other = (Dom_Class_Saldo) obj;
        if (this.mValMon.getObjMon() != other.mValMon.getObjMon() && (this.mValMon.getObjMon() == null || 
                !this.mValMon.getObjMon().equals(other.mValMon.getMonto()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 97 * hash + (this.mValMon != null ? this.mValMon.hashCode() : 0);
        return hash;
    }

    
    public int getmNum() {
        return mNum;
    }

    public void setmNum(int mNum) {
        this.mNum = mNum;
    }
    
    public void modificar (Dom_Class_Saldo xObjSaldo)throws InputException{
        xObjSaldo.validar();
        
        mFechMod = new Date();
        mHacreedor = xObjSaldo.mHacreedor;
        mLimAceedor = xObjSaldo.mLimAceedor;
        mLimDeudor = xObjSaldo.mLimDeudor;
        mNum = xObjSaldo.mNum;
        mValMon = xObjSaldo.mValMon;
    }

    @Override
    public Dom_Class_Saldo duplicar() {
        return new Dom_Class_Saldo (this);
    }

    @Override
    public boolean duplicado(Dom_Class_Saldo xObjCop) {
        if (xObjCop == this) return true;
        if (mHacreedor != xObjCop.mHacreedor) return false;
        if(mLimAceedor != mLimAceedor) return false;
        if (mLimDeudor != mLimDeudor) return false;
        if (mNum != mNum) return false;
        if (!mValMon.duplicado(xObjCop.mValMon)) return false;
        return true;
    }

    @Override
    public String toString() {
        String TipS = "Deudor";
        if (mHacreedor) TipS = "Acreedor";
        return  TipS +" " + mValMon;
    }
    
    
    
    
    

}
