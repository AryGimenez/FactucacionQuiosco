//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : LogN_ClassAb_LineaFac.java
//  @ Date : 06/05/2010
//  @ Author : 
//
//

package Logica_Negocio;


import Logica_Negocio.Dominio.Dom_Class_IVA;
import Logica_Negocio.MiExepcion.InputException;
import Precentacion.LogN_Class_Accion;
import java.util.Observable;




/**
 * L�nea de factura 
**/
public abstract class LogN_ClassAb_LineaFac extends Observable {
//Atributos_____________________________________________________________________
    /**
	 * Cantidad de art�culos involucrados en esta l�nea  
	**/
	protected float mCan;
	/**
         * Descuento adjuntado a la factura
         */
	private float mDes;
	
	/**
	 * Porcentaje del IVA de esta línea
	**/
	private float mIva;
	
	/**
	 * Precio del articulo individualmente 
	**/
	private float mPrePro;
	
	/**
	 * Articulo Relacionado a la linea 
	**/
	private LogN_ClassAb_Producto mObjProducto;

        //Constructor___________________________________________________________

        /**
         * <B>Constructor que comprende todos los datos de inicializaron </B>
         *
         * @param mCan Cantidad de Productos
         * @param mDes Porcentaje de descuento en la linea
         * @param mPrePro Precio de producto
         * @param mObjProducto Producto involucrado en esta linea
         * @throws InputException  Excepcional lazada por el método:
         * <UL>
             * <LI> thil.setmObjProducto();
             * <LI> this.setCan();
             * <LI> this.setDes();
         * </UL>
         *
         */
    public LogN_ClassAb_LineaFac(float mCan, float mDes, float mPrePro, LogN_ClassAb_Producto mObjProducto) throws InputException {
        setmObjProducto(mObjProducto);
        setCan(mCan);
        setDes(mDes);
        setPrePro(mPrePro);
        setIva(mObjProducto.getIVA());

    }

    /**
     * <B>Constructor que inicializa todos los datos de la linea de factura agregando
     * el precio de venta del producto (mObjProducto) como precio unitario (mPrePro) de
     * la misma</B>
     * @param mCan Cantidad de Productos
     * @param mDes Porcentaje de descuento en la linea
     * @param mObjProducto Producto involucrado en esta linea
     * @throws InputException  Excepcional lazada por el método:
         * <UL>
             * <LI> thil.setmObjProducto();
             * <LI> this.setCan();
             * <LI> this.setDes();
         * </UL>
     */
    public LogN_ClassAb_LineaFac(float mCan, float mDes, LogN_ClassAb_Producto mObjProducto) throws InputException {
        this(mCan, mDes, -1, mObjProducto);//Coloco -1 porque asi el set de Precio de producto me toma el valor del producto
    }
    



        //Metodos_______________________________________________________________

    /**
     * <B>Verifica que los datos internos estén correctos </B>
     * @throws InputException Se lanza si los datos de facturación no son correctos
     * (lanzada por el método “setCan(int)” “setDes(float)”)
     */
    public void validar()throws InputException{
        this.setCan(mCan);
        if (mDes < 0 || mDes > 100 )throw new InputException("El descuento insertado es menor al 0% o mayor a 100%");
        if (mCan <= 0) throw new InputException("La catnidad de prodctos de la linea debe ser mayor que 0");

    }

    /**
     * <B>Remplaza el producto relacionado con esta línea de factura </B>por el pasado por parámetro
     * @param mObjProducto Producto por el cual se va a remplazar
     * @throws InputException Lanzada si  el producto no existe en el sistema, es
     * decir si este es un objeto que no se ha dado de alta en el sistema.
     */
    protected void setmObjProducto(LogN_ClassAb_Producto mObjProducto)throws InputException {
        
        mObjProducto = LogN_Class_Fachada.getInstancia().getProducot(mObjProducto.getmProd_Cod());
        if (mObjProducto == null) throw new InputException("El Producto de esta categoría no existe en el sistema o no ha ingresado uno");
        this.mObjProducto = mObjProducto;
    }



	
    /**
     * Retorna la cantidad de de productos involucrados en esta factura
     * @return mCan Cantidad de productos en esta línea   
    **/
    public float getmCan() {
        return mCan;
    }

    /**
     * Remplaza la cantidad de producto por el valor pasada por par�metro siempre
     * y cuando este valor no sea negativo y el stock no sea inferior este.
     * @param    mCan Cantidad por la que se va a remplazar
     * @throws InputException Esta se debe implementar según los criterios de la línea
     * de factura que la implemente
    **/
    public abstract void setCan(float mCan) throws InputException;

    /**
     * Retorna el Articulo involucrado en esta l�nea
     * @return mObjProducto Producto relacionado con esta línea de factura
    **/
    public LogN_ClassAb_Producto getmObjArt() {
        return mObjProducto;
    }

    /**
     * Retorna el porcentaje del  descuento de la l�nea de la factura
     * @return mDes Descuento de esta línea (porcentaje)
    **/
    public float getmDes() {
        return mDes;
    }
    /**
     * Calcula y retorna el descuento de la facutra 
     * @return 
     */
    public float getResDes(){
        return (mCan * mPrePro) * mDes;
    }

    /**
     * Remplaza el porcentaje de descuento por el valor pasado por par�metro
     * siempre y cuando este se encuentre entre el fango de 0 y 100
     *
     * @param    mDes Descuento por el cual se va a realizar la operación
     * @throws InputException Lanzada si el Descuento (porcentaje) pasado por parámetro en menor a  0 o mayor a 100 
    **/
    public void  setDes(float mDes)throws InputException{
        if (mDes < 0 || mDes > 100 )throw new InputException("El descuento insertado es menor al 0% o mayor a 100%");
        this.mDes = mDes;
        Notificar(new LogN_Class_Accion<LogN_ClassAb_LineaFac> (LogN_Class_Accion.Modificar,this));
    }

    /**
     * Retorna el porcentaje del IVA de esta factura
     * @return mIva IVA  de la línea (Porcentaje)
    **/
    public float getmIva() {
       return mIva;
    }
    /**
     * Remplaza el valor del IVA por el contenido en el IVA pasado por parámetro
     * @param xObjIva Objeto IVA con la cual se realiza la operación
     * @throws InputException Lanzada por el método “validar()”  de “xObjIva”
     */
    public void setIva(Dom_Class_IVA xObjIva)throws InputException{
        xObjIva.validar();
        mIva = xObjIva.getmVal();
    }

    /**
     * Retorna el precio del articulo individualmente
     * @return mPrePro Precio de la  línea, el mismo no tiene que ser igual al del producto de la misma
    **/
    public float getmPrePro() {
        return mPrePro;
    }

    /**
     * Remplaza el valor del producto por el valor pasado por parmeátro si
     * este valor es negativo vuelve al valor por defecto es decir el valor
     * obtenido del articulo
     *
     * @param    mPrePro
    **/
    public void setPrePro(float mPrePro) {
        if (mPrePro < 0){
            this.mPrePro = mObjProducto.getMProd_PrecVenta();
        } else {
            this.mPrePro = mPrePro;
        }
        Notificar(new LogN_Class_Accion<LogN_ClassAb_LineaFac> (LogN_Class_Accion.Modificar,this));
    }

    /**
     * Se utiliza para actualizar el stock de los productos se debe implementar seg�n el tipo de l�nea que lo implementa
     * @throws InputException Debe ser implementado por la línea que herede de esta clase;
    **/
    public abstract void actualizarStok() throws InputException;

    /**
     * Retorna el subtotal de la línea de la lina de factura
     * @return Resultado de “getSubTotSinIva()” más el IVA  
     *
    **/
    public float getSubTot() {
        return this.getSubTotSinIva()*((mIva / 100) +1);
    }

    /**
     * Retorna el subtotal de la línea de factura contando el IVA  y el Descuento
     * @return Resultado IVA con respecto al “getSubTotSinIva()”
    **/
    public float getResIva() {
        return this.getSubTotSinIva()*(mIva / 100);
    }

    /**
     * Retorna el subtotal del producto sin el IVA
     * @return Resultado de multiplicar la cantidad de productos
     * (mCan) por el precio (mPrePro) y agregarle el descuento (mDes)
    **/
    public float getSubTotSinIva() {
        float SubTot = (mPrePro * mCan);
        if (mDes == 0) return SubTot;
        return SubTot -(SubTot *(mDes/100));
    }

    /**
     * Compara el tipo de objeto pasado por paremetro:
     * <UL>
         * <LI>Se de tipo "LogN_ClassAb_LineaFac"
         * <LI>Coinsida el pruducto de la linea 
     * </UL>
     * @param obj
     * @return true o false dependiendo si se cumplen las condiciones descriptas
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LogN_ClassAb_LineaFac other = (LogN_ClassAb_LineaFac) obj;
        if (this.mObjProducto != null && !this.mObjProducto.equals(other.mObjProducto)) {
            return false;
        }
        return true;
    }

    /**
     * 
     * @return 
     */
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 37 * hash + (this.mObjProducto != null ? this.mObjProducto.hashCode() : 0);
        return hash;
    }

    /**
     * <B>Notifica a los Observadores que se produjo un cambio en la línea <\B>
     * @param arg se pasa al metodo super.notifyObservers (Object)
     */
    public void Notificar (Object arg){
        super.setChanged();
        super.notifyObservers(arg);
    }





}
